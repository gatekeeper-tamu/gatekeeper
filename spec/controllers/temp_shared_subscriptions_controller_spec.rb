require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TempSharedSubscriptionsController, type: :controller do

	login_user

  before (:each) do
      FactoryBot.create(:subscription, user: controller.current_user)
  end

  let(:valid_attributes) {
    { :subscription => controller.current_user.subscriptions.first }
  }

  let(:invalid_attributes) {
    { :subscription => nil }
  }

  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      TempSharedSubscription.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      temp_shared_subscription = TempSharedSubscription.create! valid_attributes
      get :show, params: {id: temp_shared_subscription.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      temp_shared_subscription = TempSharedSubscription.create! valid_attributes
      get :edit, params: {id: temp_shared_subscription.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {end_date: "2025-05-05"}
      }

      it "updates the requested temp_shared_subscription" do
        temp_shared_subscription = TempSharedSubscription.create! valid_attributes
        put :update, params: {id: temp_shared_subscription.id, temp_shared_subscription: new_attributes}, session: valid_session
        temp_shared_subscription.reload
        puts "Date: #{temp_shared_subscription.end_date}"
        expect(temp_shared_subscription.end_date.to_s == "2025-05-05").to be true
      end

      it "redirects to the temp_shared_subscription" do
        temp_shared_subscription = TempSharedSubscription.create! valid_attributes
        put :update, params: {id: temp_shared_subscription.id, temp_shared_subscription: new_attributes}, session: valid_session
        expect(response).to redirect_to(temp_shared_subscription.subscription)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        TempSharedSubscription.create! valid_attributes
        put :update, params: {id: "1234589", temp_shared_subscription: invalid_attributes}, session: valid_session
        expect(response).to redirect_to("/404.html")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested temp_shared_subscription" do
      temp_shared_subscription = TempSharedSubscription.create! valid_attributes
      expect {
        delete :destroy, params: {id: temp_shared_subscription.to_param}, session: valid_session
      }.to change(TempSharedSubscription, :count).by(-1)
    end

    it "redirects to the temp_shared_subscriptions list" do
      temp_shared_subscription = TempSharedSubscription.create! valid_attributes
      sub = temp_shared_subscription.subscription
      delete :destroy, params: {id: temp_shared_subscription.to_param}, session: valid_session
      expect(response).to redirect_to(subscription_url(sub))
    end
  end

end
